;============================================================================
; References:
;   - http://wiki.osdev.org/Bare_Bones
;   - https://davidad.github.io/blog/2014/02/18/kernel-from-scratch/ (David A. Dalrymple)


;============================================================================
format ELF64 
public multiboot_entry as 'multiboot_entry'
use32


;============================================================================
section '.multiboot' writeable

; Setting up the Multiboot header - see GRUB docs for details
; The multiboot header must come first.
; Multiboot header must be aligned on a 8-byte boundary

MBALIGN         =     1 shl 0                  ; Align loaded modules on page boundaries
MEMINFO         =     1 shl 1                  ; Provide memory map
;;; GRAPHICS    =     1 shl 2
GRAPHICS        =     1 shl 0                  ; std 80x25
MAGIC           =     1BADB002h                ; 'magic number' lets bootloader find the header
FLAGS           =     MBALIGN or MEMINFO or GRAPHICS    ; This is the Multiboot 'flag' field
CHECKSUM        =     -(MAGIC + FLAGS)         ; Checksum required to prove that we are multiboot
VBE_MODE        =     0
VBE_WIDTH       =     1024
VBE_HEIGHT      =     768
VBE_DEPTH       =     32

align 4                                        ; align 4 seems to work so far
multiboot_header:
               dd MAGIC
               dd FLAGS
               dd CHECKSUM
               dd 0
               dd 0
               dd 0
               dd 0
               dd 0
               dd VBE_MODE
               dd VBE_WIDTH
               dd VBE_HEIGHT
               dd VBE_DEPTH


;============================================================================
section '.text' executable                     ; The beginning of our kernel code

multiboot_entry:                               ; global multiboot_entry


               mov esp, stack_ + STACK_SIZE    ; set up the stack
               mov [magic], ebx                ; multiboot magic number
               mov [multiboot_info], eax       ; multiboot data structure

        ;------------
        ; Now we're going to set up the page tables for 64-bit mode.
        ; Since this is a minimal example, we're just going to set up a single page.
        ; The 64-bit page table uses four levels of paging,
        ;    PML4E table => PDPTE table => PDE table => PTE table => physical addr
        ; You don't have to use all of them, but you have to use at least the first
        ; three. So we're going to set up PML4E, PDPTE, and PDE tables here, each
        ; with a single entry.

               PML4E_ADDR     = 0x8000
               PDPTE_ADDR     = 0x9000
               PDE_ADDR       = 0xA000

        ; Set up PML4 entry, which will point to PDPT entry.
               mov dword eax, PDPTE_ADDR

        ; The low 12 bits of the PML4E entry are zeroed out when it's dereferenced,
        ; and used to encode metadata instead. Here we're setting the Present and
        ; Read/Write bits. You might also want to set the User bit, if you want a
        ; page to remain accessible in user-mode code.
               or  eax, 011b                    ; Would be 0b111 to set User bit also
               mov [PML4E_ADDR], eax

        ; Although we're in 32-bit mode, the table entry is 64 bits. We can just zero
        ; out the upper bits in this case.
               mov [PML4E_ADDR+4], dword 0

        ; Set up PDPT entry, which will point to PD entry.
               mov  eax, PDE_ADDR
               or eax, 011b
               mov [PDPTE_ADDR], eax
               mov [PDPTE_ADDR+4], dword 0

        ; Set up PD entry, which will point to the first 2MB page (0).  But we
        ; need to set three bits this time, Present, Read/Write and Page Size (to
        ; indicate that this is the last level of paging in use).
               mov dword [PDE_ADDR], 10000011b
               mov dword [PDE_ADDR+4], 0

        ; Enable PGE and PAE bits of CR4 to get 64-bit paging available.
               mov eax, 10100000b
               mov cr4, eax

        ; Set master (PML4) page table in CR3.
               mov eax, PML4E_ADDR
               mov cr3, eax

        ; Set IA-32e Mode Enable (read: 64-bit mode enable) in the "model-specific
        ; register" (MSR) called Extended Features Enable (EFER).
               mov ecx, 0xc0000080
               rdmsr                           ; takes ecx as argument, deposits contents of MSR into eax
               or eax, 100000000b
               wrmsr                           ; exactly the reverse of rdmsr

        ; Enable PG flag of CR0 to actually turn on paging.
               mov eax, cr0
               or eax, 0x80000000
               mov cr0, eax


        ; Load Global Descriptor Table (outdated access control, but needs to be set)
               lgdt [gdt_hdr]


               jmp 0x08:_64_bits               ; direct far jump into 64-bit zone.


;============================================================================
use64
_64_bits:

;;;            call osdevasm_main              ; calling the kernel ( original C kernel )
               call main                       ; calling main:  display.asm


hang:
               hlt                             ; main is done -> halt  ( our way to say 'shutdown', so far... )
               jmp hang                        ; just in case


include 'display.fasm'


;============================================================================
section '.data' writeable                               ; initialized data 

; Global descriptor table entry format
; See Intel 64 Software Developers' Manual, Vol. 3A, Figure 3-8
; or http://en.wikipedia.org/wiki/Global_Descriptor_Table

macro GDT_ENTRY base, limit, flags, type {
               ; %1 is base address, %2 is segment limit, %3 is flags, %4 is type.
               dw   base and 0xffff
               dw   base and 0xffff
               db   (base shr 16) and 0xff
               db   type or ((flags shl 4) and 0xf0)
               db   (flags and 0xf0) or ((limit shr 16) and 0x0f)
               db   base shr 24
}

EXECUTE_READ   =     1010b
READ_WRITE     =     0010b
RING0          = 10101001b             ; Flags set: Granularity, 64-bit, Present, S; Ring=00
                                       ; Note: Ring is determined by bits 1 and 2 (the only "00")

; Global descriptor table (loaded by lgdt instruction)
gdt_hdr:
               dw   gdt_end - gdt - 1
               dd   gdt
gdt:
               GDT_ENTRY 0, 0, 0, 0
               GDT_ENTRY 0, 0xffffff, RING0, EXECUTE_READ
               GDT_ENTRY 0, 0xffffff, RING0, READ_WRITE
               ; You'd want to have entries for other rings here, if you were using them.
gdt_end:


align 4
kernel_stack_bottom:           dd stack_
kernel_stack_size:             dd STACK_SIZE


;============================================================================
section '.bss' writeable                               ; not initialized data ( no space in ELF used )

align 4
multiboot_info:                rd 1                    ; we will use this in kernel's main
magic:                         rd 1                    ; we will use this in kernel's main

vga_mem                        = 0b8000h
vga_line:                      rd 1
vga_col:                       rd 1
vga_attr:                      rd 1                    ; vga_attr := attr << 8  -->  bx := chr+attr; vga[]:=bx

align 8
stack_:                        rb STACK_SIZE           ; reserve 16 KiB stack
STACK_SIZE                     = 4000h                 ; Stack size is 16KiB


;============================================================================

